openapi: 3.0.0
info:
  title: Bookstore API
  version: 1.0.0
  description: A simple Express Bookstore API
  contact:
    name: API Support
    url: http://www.example.com
    email: support@example.com
servers:
  - url: http://localhost:8000/v1
    description: Development server
tags:
  - name: Authors
    description: List of endpoints available to perform CRUD operations on authors
  - name: Books
    description: List of endpoints available to perform CRUD operations on books
components:
  schemas:
    Author:
      type: object
      required:
        - name
        - year
      properties:
        _id:
          type: string
          description: Auto-generated MongoDB ID
        name:
          type: string
          description: Author name
        year:
          type: number
          description: Birth year of the author
        books:
          type: array
          items:
            type: string
          description: IDs of books written by this author
    Book:
      type: object
      required:
        - name
      properties:
        _id:
          type: string
          description: Auto-generated MongoDB ID
        name:
          type: string
          description: Book title
        publishedDate:
          type: string
          description: Date when the book was published
        genres:
          type: array
          items:
            type: string
          description: Book genres
        author:
          type: string
          description: ID of the book's author
  examples:
    Author:
      value:
        name: "J.K. Rowling"
        year: 1965
        books: ["60d21b4967d0d8992e610c85", "60d21b4967d0d8992e610c86"]
    AuthorResponse:
      value:
        _id: "60d21b4967d0d8992e610c83"
        name: "J.K. Rowling"
        year: 1965
        books: ["60d21b4967d0d8992e610c85", "60d21b4967d0d8992e610c86"]
    AuthorsList:
      value:
        - _id: "60d21b4967d0d8992e610c83"
          name: "J.K. Rowling"
          year: 1965
          books: ["60d21b4967d0d8992e610c85", "60d21b4967d0d8992e610c86"]
        - _id: "60d21b4967d0d8992e610c84"
          name: "George Orwell"
          year: 1903
          books: ["60d21b4967d0d8992e610c87"]
    Book:
      value:
        name: "Harry Potter and the Philosopher's Stone"
        publishedDate: "1997-06-26"
        genres: ["Fantasy", "Young Adult"]
        author: "60d21b4967d0d8992e610c83"
    BookResponse:
      value:
        _id: "60d21b4967d0d8992e610c85"
        name: "Harry Potter and the Philosopher's Stone"
        publishedDate: "1997-06-26"
        genres: ["Fantasy", "Young Adult"]
        author: "60d21b4967d0d8992e610c83"
    BooksList:
      value:
        - _id: "60d21b4967d0d8992e610c85"
          name: "Harry Potter and the Philosopher's Stone"
          publishedDate: "1997-06-26"
          genres: ["Fantasy", "Young Adult"]
          author: "60d21b4967d0d8992e610c83"
        - _id: "60d21b4967d0d8992e610c86"
          name: "Harry Potter and the Chamber of Secrets"
          publishedDate: "1998-07-02"
          genres: ["Fantasy", "Young Adult"]
          author: "60d21b4967d0d8992e610c83"
paths:
  /author:
    post:
      summary: Create an author
      description: Create a new author
      tags: [Authors]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
            examples:
              authorExample:
                $ref: '#/components/examples/Author'
      responses:
        200:
          description: The created author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              examples:
                authorResponseExample:
                  $ref: '#/components/examples/AuthorResponse'
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    get:
      summary: List authors
      description: List all authors
      tags: [Authors]
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
              examples:
                authorsListExample:
                  $ref: '#/components/examples/AuthorsList'
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /author/{id}:
    get:
      summary: Get an author
      description: Returns the details for an author
      tags: [Authors]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The author id
          example: "60d21b4967d0d8992e610c83"
      responses:
        200:
          description: The author data by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              examples:
                authorResponseExample:
                  $ref: '#/components/examples/AuthorResponse'
        404:
          description: Author not found
          content:
            application/json:
              example:
                message: "Author not found"
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    put:
      summary: Update an author
      description: Update the details for an author
      tags: [Authors]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The author id
          example: "60d21b4967d0d8992e610c83"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
            examples:
              authorExample:
                value:
                  name: "J.K. Rowling"
                  year: 1965
                  books: ["60d21b4967d0d8992e610c85", "60d21b4967d0d8992e610c86", "60d21b4967d0d8992e610c88"]
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              example:
                message: "Author updated successfully"
                author:
                  _id: "60d21b4967d0d8992e610c83"
                  name: "J.K. Rowling"
                  year: 1965
                  books: ["60d21b4967d0d8992e610c85", "60d21b4967d0d8992e610c86", "60d21b4967d0d8992e610c88"]
        404:
          description: Author not found
          content:
            application/json:
              example:
                message: "Author not found"
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    delete:
      summary: Delete an author
      description: Delete an author and any related resources 
      tags: [Authors]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The author id
          example: "60d21b4967d0d8992e610c83"
      responses:
        200:
          description: Deleted successfully
          content:
            application/json:
              example:
                message: "Author deleted successfully"
        404:
          description: Author not found
          content:
            application/json:
              example:
                message: "Author not found"
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /book:
    post:
      summary: Create a book
      description: Create a new book
      tags: [Books]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
            examples:
              bookExample:
                $ref: '#/components/examples/Book'
      responses:
        200:
          description: The created book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              examples:
                bookResponseExample:
                  $ref: '#/components/examples/BookResponse'
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    get:
      summary: List books
      description: List all books
      tags: [Books]
      responses:
        200:
          description: The list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples:
                booksListExample:
                  $ref: '#/components/examples/BooksList'
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /book/{id}:
    get:
      summary: Get a books
      description: Returns the details for a book
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The book id
          example: "60d21b4967d0d8992e610c85"
      responses:
        200:
          description: The book data by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              examples:
                bookResponseExample:
                  $ref: '#/components/examples/BookResponse'
        404:
          description: Book not found
          content:
            application/json:
              example:
                message: "Book not found"
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    put:
      summary: Update a book
      description: Update the details for a book
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The book id
          example: "60d21b4967d0d8992e610c85"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
            examples:
              bookExample:
                value:
                  name: "Harry Potter and the Philosopher's Stone"
                  publishedDate: "1997-06-26"
                  genres: ["Fantasy", "Young Adult", "Adventure"]
                  author: "60d21b4967d0d8992e610c83"
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              example:
                message: "Book updated successfully"
                book:
                  _id: "60d21b4967d0d8992e610c85"
                  name: "Harry Potter and the Philosopher's Stone"
                  publishedDate: "1997-06-26"
                  genres: ["Fantasy", "Young Adult", "Adventure"]
                  author: "60d21b4967d0d8992e610c83"
        404:
          description: Book not found
          content:
            application/json:
              example:
                message: "Book not found"
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    delete:
      summary: Delete a book
      description: Delete a book and any related resources
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The book id
          example: "60d21b4967d0d8992e610c85"
      responses:
        200:
          description: Deleted successfully
          content:
            application/json:
              example:
                message: "Book deleted successfully"
        404:
          description: Book not found
          content:
            application/json:
              example:
                message: "Book not found"
        500:
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
