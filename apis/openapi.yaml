openapi: 3.0.0
info:
  title: Bookstore API
  version: 1.0.0
  description: A simple Express Bookstore API
  contact:
    name: API Support
    url: http://www.example.com
    email: support@example.com
servers:
  - url: http://localhost:8000/v1
    description: Development server
tags:
  - name: Authors
    description: List of endpoints available to perform CRUD operations on authors
  - name: Books
    description: List of endpoints available to perform CRUD operations on books
components:
  schemas:
    Author:
      type: object
      required:
        - name
        - year
      properties:
        _id:
          type: string
          description: Auto-generated MongoDB ID
        name:
          type: string
          description: Author name
        year:
          type: number
          description: Birth year of the author
        books:
          type: array
          items:
            type: string
          description: IDs of books written by this author
    Book:
      type: object
      required:
        - name
      properties:
        _id:
          type: string
          description: Auto-generated MongoDB ID
        name:
          type: string
          description: Book title
        publishedDate:
          type: string
          description: Date when the book was published
        genres:
          type: array
          items:
            type: string
          description: Book genres
        author:
          type: string
          description: ID of the book's author
paths:
  /author:
    post:
      summary: Create an author
      tags: [Authors]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The created author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        500:
          description: Server error
    get:
      summary: List authors
      tags: [Authors]
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        500:
          description: Server error
  /author/{id}:
    get:
      summary: Get an author
      tags: [Authors]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The author id
      responses:
        200:
          description: The author data by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        500:
          description: Server error
    put:
      summary: Update an author
      tags: [Authors]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The author id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: Updated successfully
        500:
          description: Server error
    delete:
      summary: Delete an author
      tags: [Authors]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The author id
      responses:
        200:
          description: Deleted successfully
        500:
          description: Server error
  /book:
    post:
      summary: Create a book
      tags: [Books]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The created book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        500:
          description: Server error
    get:
      summary: List books
      tags: [Books]
      responses:
        200:
          description: The list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        500:
          description: Server error
  /book/{id}:
    get:
      summary: Get a books
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The book id
      responses:
        200:
          description: The book data by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        500:
          description: Server error
    put:
      summary: Update a book
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The book id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Updated successfully
        500:
          description: Server error
    delete:
      summary: Delete a book
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The book id
      responses:
        200:
          description: Deleted successfully
        500:
          description: Server error
